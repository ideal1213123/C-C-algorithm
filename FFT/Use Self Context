#include "stdio.h"
#include "math.h"
#include "stdlib.h"

typedef float FFT_TYPE;


#define FFT_SWAP(a0,a1,b0,b1,t0,t1) t0=a0;t1=a1;a0=b0;a1=b1;b0=t0;b1=t1
#define COMPLEX_MULT(ra,ia,rb,ib,or,oi) or=ra*rb-ia*ib;oi=ra*ib+ia*rb

void FFTinit(size_t* plim, size_t* plen,FFT_TYPE* wr, FFT_TYPE* wi,unsigned short* rev,size_t n){
	double FFT_2PI = 2*acos(-1);	
	for(size_t i=0; i<n; ++i ){
		double ang = FFT_2PI*i/n;
		wr[i] = cos(ang);
		wi[i] = sin(ang);
	}

	for(size_t i=0; i<n; ++i ){ rev[i] = 0; }
    size_t pos = 0;
    *plen = 0;
	*plim = 1; 
    while( *plim < n ){ (*plim)<<=1; ++(*plen); }
	for( size_t i=0; i<(*plim); ++i ){
	    pos    = (rev[i>>1]>>1) | ((i&1)<<((*plen)-1));
        rev[i] = pos;
	}
}

void FFTcore(FFT_TYPE* reals,FFT_TYPE* imags, size_t lim, size_t len, FFT_TYPE* wr, FFT_TYPE* wi,unsigned short* rev,size_t n){
    FFT_TYPE tempR = 0, tempI = 0;
    size_t pos = 0, odpos = 0; 
    for( size_t i=0; i<lim; ++i ){
        pos = rev[i];
        if( i<pos ){
        	FFT_SWAP(reals[i],imags[i],reals[pos],imags[pos],tempR,tempI);
        }
    }

    for( size_t dep=1; dep<=len; ++dep ){
        size_t m    = 1<<dep;
        size_t half = m>>1;
        size_t gap  = n>>dep;
        for(size_t k=0; k<lim; k+=m ){
        	size_t coefIdx = 0;   
            for(size_t j=0; j<half; ++j ){
	        	FFT_TYPE tr = 0, ti = 0;
	        	FFT_TYPE ur = 0, ui = 0;            	
            	pos   = k+j;
            	odpos = pos+half;
				
				COMPLEX_MULT(wr[coefIdx],wi[coefIdx],reals[odpos],imags[odpos], tr, ti);
                ur = reals[pos];  
				ui = imags[pos];
                reals[pos]   = ur + tr;
                imags[pos]   = ui + ti;
                reals[odpos] = ur - tr;
                imags[odpos] = ui - ti;
                
                coefIdx += gap;
            }
        }
    }
}


void IFFTcore(FFT_TYPE* reals,FFT_TYPE* imags, size_t lim, size_t len, FFT_TYPE* wr, FFT_TYPE* wi,unsigned short* rev,size_t n){
    FFT_TYPE tempR = 0, tempI = 0;
    size_t pos = 0, odpos = 0;
    for( size_t i=0; i<lim; ++i ){
        pos = rev[i];
        if( i<pos ){
        	FFT_SWAP(reals[i],imags[i],reals[pos],imags[pos],tempR,tempI);
        }
    }

    for( size_t dep=1; dep<=len; ++dep ){
        size_t m    = 1<<dep;
        size_t half = m>>1;
        size_t gap  = n>>dep;
        for(size_t k=0; k<lim; k+=m ){
        	size_t coefIdx = 0;   
            for(size_t j=0; j<half; ++j ){
	        	FFT_TYPE tr = 0, ti = 0;
	        	FFT_TYPE ur = 0, ui = 0;            	
            	pos   = k+j;
            	odpos = pos+half;
				
				COMPLEX_MULT(wr[coefIdx],-wi[coefIdx],reals[odpos],imags[odpos], tr, ti);
                ur = reals[pos];  
				ui = imags[pos];
                reals[pos]   = ur + tr;
                imags[pos]   = ui + ti;
                reals[odpos] = ur - tr;
                imags[odpos] = ui - ti;
                
                coefIdx += gap;
            }
        }
    }
	double rat = 1.0/n;
	for(size_t i=0; i<n; ++i ){ reals[i] *= rat; imags[i] *= rat; }    
}



void main(){
    #define TEST_FFT_N (16)
    FFT_TYPE gFFTCoefReal[TEST_FFT_N] = {0};
    FFT_TYPE gFFTCoefImag[TEST_FFT_N] = {0};
    unsigned short gFFTRevPos[TEST_FFT_N] = {0};
    size_t   gFFTlim = 0;
    size_t   gFFTlen = 0;    
    FFT_TYPE xr[TEST_FFT_N] = {1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1};
    FFT_TYPE xi[TEST_FFT_N] = {-0,-2,-3,-4,-5,-6,-7,-0,-8,-7,-6,-5,-4,-3,-2,-1};
    
    int n = TEST_FFT_N;
    FFTinit(&gFFTlim,&gFFTlen,gFFTCoefReal,gFFTCoefImag,gFFTRevPos,n);
    FFTcore(xr,xi,gFFTlim,gFFTlen,gFFTCoefReal,gFFTCoefImag,gFFTRevPos,n);
    IFFTcore(xr,xi,gFFTlim,gFFTlen,gFFTCoefReal,gFFTCoefImag,gFFTRevPos,n);
    
    printf("-----------\r\n");
    for(size_t i=0; i<n; ++i){ printf("<%8.4f %8.4f>\r\n",xr[i],xi[i]); }
}